// Export services for different formats

// Export trip as GPX file for GPS devices
export const exportToGPX = (trip, waypoints) => {
  const gpxHeader = `<?xml version="1.0" encoding="UTF-8"?>
<gpx version="1.1" creator="OpenRoad" xmlns="http://www.topografix.com/GPX/1/1">
  <metadata>
    <name>${trip.name}</name>
    <desc>Road trip created with OpenRoad</desc>
    <time>${new Date().toISOString()}</time>
  </metadata>`

  const gpxWaypoints = waypoints
    .filter(wp => wp.lat && wp.lng)
    .map((wp, index) => `
  <wpt lat="${wp.lat}" lon="${wp.lng}">
    <name>${wp.name || `Waypoint ${index + 1}`}</name>
    <desc>${wp.notes || ''}</desc>
    <type>${wp.type || 'waypoint'}</type>
    <time>${wp.date ? new Date(wp.date).toISOString() : new Date().toISOString()}</time>
  </wpt>`)
    .join('')

  const gpxRoute = waypoints.length > 1 ? `
  <rte>
    <name>${trip.name} Route</name>
    <desc>Route for ${trip.name}</desc>
    ${waypoints
      .filter(wp => wp.lat && wp.lng)
      .map(wp => `
    <rtept lat="${wp.lat}" lon="${wp.lng}">
      <name>${wp.name || 'Waypoint'}</name>
    </rtept>`)
      .join('')}
  </rte>` : ''

  const gpxFooter = `
</gpx>`

  return gpxHeader + gpxWaypoints + gpxRoute + gpxFooter
}

// Export trip as KML file for Google Earth
export const exportToKML = (trip, waypoints) => {
  const kmlHeader = `<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
  <Document>
    <name>${trip.name}</name>
    <description>Road trip created with OpenRoad</description>
    <Style id="waypointStyle">
      <IconStyle>
        <Icon>
          <href>http://maps.google.com/mapfiles/kml/paddle/red-circle.png</href>
        </Icon>
      </IconStyle>
    </Style>
    <Style id="routeStyle">
      <LineStyle>
        <color>ff0000ff</color>
        <width>4</width>
      </LineStyle>
    </Style>`

  const kmlWaypoints = waypoints
    .filter(wp => wp.lat && wp.lng)
    .map((wp, index) => `
    <Placemark>
      <name>${wp.name || `Waypoint ${index + 1}`}</name>
      <description>${wp.notes || ''}</description>
      <styleUrl>#waypointStyle</styleUrl>
      <Point>
        <coordinates>${wp.lng},${wp.lat},0</coordinates>
      </Point>
    </Placemark>`)
    .join('')

  const kmlRoute = waypoints.length > 1 ? `
    <Placemark>
      <name>${trip.name} Route</name>
      <description>Route for ${trip.name}</description>
      <styleUrl>#routeStyle</styleUrl>
      <LineString>
        <coordinates>
          ${waypoints
            .filter(wp => wp.lat && wp.lng)
            .map(wp => `${wp.lng},${wp.lat},0`)
            .join('\n          ')}
        </coordinates>
      </LineString>
    </Placemark>` : ''

  const kmlFooter = `
  </Document>
</kml>`

  return kmlHeader + kmlWaypoints + kmlRoute + kmlFooter
}

// Export trip as Google Maps URL
export const exportToGoogleMaps = (waypoints) => {
  const validWaypoints = waypoints.filter(wp => wp.lat && wp.lng)
  if (validWaypoints.length < 2) return null

  const origin = validWaypoints[0]
  const destination = validWaypoints[validWaypoints.length - 1]
  const waypoints_param = validWaypoints.slice(1, -1)
    .map(wp => `${wp.lat},${wp.lng}`)
    .join('|')

  let url = `https://www.google.com/maps/dir/${origin.lat},${origin.lng}/${destination.lat},${destination.lng}`
  
  if (waypoints_param) {
    url += `/${waypoints_param}`
  }

  return url
}

// Export trip as Apple Maps URL
export const exportToAppleMaps = (waypoints) => {
  const validWaypoints = waypoints.filter(wp => wp.lat && wp.lng)
  if (validWaypoints.length < 2) return null

  const destination = validWaypoints[validWaypoints.length - 1]
  return `http://maps.apple.com/?daddr=${destination.lat},${destination.lng}&dirflg=d`
}

// Export trip as PDF itinerary
export const exportToPDF = async (trip, waypoints) => {
  // This would require a PDF library like jsPDF
  // For now, return formatted text that can be printed
  const formattedTrip = `
ROAD TRIP ITINERARY
===================

Trip: ${trip.name}
Created: ${new Date(trip.created).toLocaleDateString()}
${trip.description ? `Description: ${trip.description}` : ''}

WAYPOINTS
---------
${waypoints.map((wp, index) => `
${index + 1}. ${wp.name || `Waypoint ${index + 1}`}
   Location: ${wp.address || 'Unknown'}
   Date: ${wp.date || 'Not set'}
   Time: ${wp.time || 'Not set'}
   Notes: ${wp.notes || 'None'}
`).join('')}

ROUTE SUMMARY
-------------
Total waypoints: ${waypoints.length}
Estimated distance: ${trip.route?.distance ? formatDistance(trip.route.distance) : 'Unknown'}
Estimated time: ${trip.route?.duration ? formatDuration(trip.route.duration) : 'Unknown'}

Generated by OpenRoad - Free Road Trip Planner
`

  return formattedTrip
}

// Export trip as CSV for spreadsheet applications
export const exportToCSV = (trip, waypoints) => {
  const headers = ['Name', 'Address', 'Latitude', 'Longitude', 'Date', 'Time', 'Notes', 'Type']
  const rows = waypoints.map(wp => [
    wp.name || '',
    wp.address || '',
    wp.lat || '',
    wp.lng || '',
    wp.date || '',
    wp.time || '',
    wp.notes || '',
    wp.type || 'waypoint'
  ])

  const csvContent = [headers, ...rows]
    .map(row => row.map(cell => `"${cell}"`).join(','))
    .join('\n')

  return csvContent
}

// Download file helper
export const downloadFile = (content, filename, contentType = 'text/plain') => {
  const blob = new Blob([content], { type: contentType })
  const url = URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  link.click()
  URL.revokeObjectURL(url)
}

// Format helpers
const formatDistance = (meters) => {
  if (meters < 1000) {
    return `${Math.round(meters)} m`
  } else {
    return `${(meters / 1000).toFixed(1)} km`
  }
}

const formatDuration = (seconds) => {
  const hours = Math.floor(seconds / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`
  } else {
    return `${minutes}m`
  }
}